ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else if(is.na(custy_2[1]) || is.na(custy_2[2])){
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else{
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
geom_line(data = cust, aes(x = custx_2, y = custy_2, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}
ggplot() + geom_bar(data = STCKData ,stat = 'identity', aes(x = Dates, y = Volume)) +
labs(title = "Volume Chart")
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Log Scale Closing Price Line Chart") +
coord_trans( y="log10")
#EMA
n_12 = 12
k_12 = 2/(n_12 + 1)
x_12 = mean(Prices$prices[1:12])
l_12 = (length(Prices$prices) - (n_12-1))
EMA_12 = data.frame(numeric(length(Prices$prices) - (n_12-1)), Prices$dates[12:length(Prices$dates)])
colnames(EMA_12) = c("EMA", "dates")
EMA_12[1,1] = x_12
for (i_12 in 2:l_12) {
x_12 = Prices$prices[i_12+n_12-1]*k_12+x_12*(1-k_12)
EMA_12$EMA[i_12] = x_12
}
n_26 = 26
k_26 = 2/(n_26 + 1)
x_26 = mean(Prices$prices[1:26])
l_26 = (length(Prices$prices) - (n_26-1))
EMA_26 = data.frame(numeric(length(Prices$prices) - (n_26-1)), Prices$dates[26:length(Prices$dates)])
colnames(EMA_26) = c("EMA", "dates")
EMA_26[1,1] = x_26
for (i_26 in 2:l_26) {
x_26 = Prices$prices[i_26+n_26-1]*k_26+x_26*(1-k_26)
EMA_26$EMA[i_26] = x_26
}
colors = c("EMA 12" = "darkblue", "EMA 26" = "darkgreen")
ggplot() + geom_line(data = EMA_12, aes(x = dates, y = EMA, color = "EMA 12" )) +
geom_line(data = EMA_26,aes(x = dates, y = EMA, color = "EMA 26")) +
labs(x = "Date", y = "Prices", color = "Legend") +
scale_color_manual(values = colors)
#MACD
MACD = data.frame(numeric(length(EMA_26$EMA)),Dates[26:length(Dates)])
colnames(MACD) = c("MACD_Values", "dates")
for(i_MAC in 1:length(EMA_26$EMA)){
MACD$MACD_Values[i_MAC] = EMA_12$EMA[i_MAC + 14] - EMA_26$EMA[i_MAC]
}
n_9 = 9
k_9 = 2/(n_9 + 1)
x_9 = mean(MACD$MACD_Values[1:9])
l_9 = (length(MACD$MACD_Values) - (n_9-1))
MDEMA_9 = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
MACDDIF = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
colnames(MDEMA_9) = c("MDEMA", "dates")
colnames(MACDDIF) = c("Difference", "dates")
MDEMA_9[1,1] = x_9
for (i_9 in 2:l_9) {
x_9 = MACD$MACD_Values[i_9+n_9-1]*k_9+x_9*(1-k_9)
MDEMA_9$MDEMA[i_9] = x_9
}
for (i_dif in 1:(length(MDEMA_9$MDEMA)-1)) {
MACDDIF$Difference[i_dif] = MACD$MACD_Values[i_dif+8] - MDEMA_9$MDEMA[i_dif]
}
MACD$dates = as.Date(MACD$dates, format = "%Y-%m-%d")
MDEMA_9$dates = as.Date(MDEMA_9$dates, format = "%Y-%m-%d")
MACDDIF$dates = as.Date(MACDDIF$dates, format = "%Y-%m-%d")
M1 = merge(x = MACD, y = MDEMA_9, by = 'dates', all.x = T)
MACTT = merge(x = M1, y = MACDDIF, by = 'dates', all.x = T)
colors_1 = c("MACD" = "yellow", "Signal (EMA 9)" = "orange", "MACDIF" = "orchid4")
ggplot() + geom_bar(data = MACDDIF, stat = 'identity', aes(x = dates, y = Difference, color = "MACDIF")) +
geom_line(data = MACD, aes(x = dates, y = MACD_Values, color = "MACD" )) +
geom_line(data = MDEMA_9, aes(x = dates, y = MDEMA, color = "Signal (EMA 9)")) +
labs(x = "Date", y = "VALUE", color = "Legend", title = "MACD") +
scale_color_manual(values = colors_1)
library("quantmod")
library("ggplot2")
library("tidyquant")
symval = "SOL.JO"
getSymbols(Symbols = symval, src ="yahoo", from = as.Date("2020-01-01"), to = Sys.Date())
STOCK <- get(symval)
STCKData = data.frame(STOCK)
Dates = index(STOCK)
STCKData = data.frame(STOCK,Dates)
colnames(STCKData) = c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Dates")
Prices = data.frame(Dates, STOCK[,4])
colnames(Prices) = c("dates", "prices")
Av = mean(Prices$prices)
stddev = sd(Prices$prices)
#Regression
regres = lm(prices~dates, data = Prices)
regfitted = data.frame(fitted.values(regres), Dates)
#Custom Trend Lines
custy_1 = c(NA,NA)
custy_2 = c(NA,NA)
custy_3 = c(NA,NA)
custx_1 = as.Date(c(NA,NA))
custx_2 = as.Date(c(NA,NA))
custx_3 = as.Date(c(NA,NA))
cust = data.frame(custy_1,custx_1,custy_2,custx_2)
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
geom_line(data = regfitted, aes(x = Dates, y = fitted.values.regres./100, color = "red")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Closing Price Line Chart")
if(is.na(custy_1)[1] || is.na(custy_1[2]))  {
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else if(is.na(custy_2[1]) || is.na(custy_2[2])){
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else{
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
geom_line(data = cust, aes(x = custx_2, y = custy_2, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}
ggplot() + geom_bar(data = STCKData ,stat = 'identity', aes(x = Dates, y = Volume)) +
labs(title = "Volume Chart")
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Log Scale Closing Price Line Chart") +
coord_trans( y="log10")
#EMA
n_12 = 12
k_12 = 2/(n_12 + 1)
x_12 = mean(Prices$prices[1:12])
l_12 = (length(Prices$prices) - (n_12-1))
EMA_12 = data.frame(numeric(length(Prices$prices) - (n_12-1)), Prices$dates[12:length(Prices$dates)])
colnames(EMA_12) = c("EMA", "dates")
EMA_12[1,1] = x_12
for (i_12 in 2:l_12) {
x_12 = Prices$prices[i_12+n_12-1]*k_12+x_12*(1-k_12)
EMA_12$EMA[i_12] = x_12
}
n_26 = 26
k_26 = 2/(n_26 + 1)
x_26 = mean(Prices$prices[1:26])
l_26 = (length(Prices$prices) - (n_26-1))
EMA_26 = data.frame(numeric(length(Prices$prices) - (n_26-1)), Prices$dates[26:length(Prices$dates)])
colnames(EMA_26) = c("EMA", "dates")
EMA_26[1,1] = x_26
for (i_26 in 2:l_26) {
x_26 = Prices$prices[i_26+n_26-1]*k_26+x_26*(1-k_26)
EMA_26$EMA[i_26] = x_26
}
colors = c("EMA 12" = "darkblue", "EMA 26" = "darkgreen")
ggplot() + geom_line(data = EMA_12, aes(x = dates, y = EMA, color = "EMA 12" )) +
geom_line(data = EMA_26,aes(x = dates, y = EMA, color = "EMA 26")) +
labs(x = "Date", y = "Prices", color = "Legend") +
scale_color_manual(values = colors)
#MACD
MACD = data.frame(numeric(length(EMA_26$EMA)),Dates[26:length(Dates)])
colnames(MACD) = c("MACD_Values", "dates")
for(i_MAC in 1:length(EMA_26$EMA)){
MACD$MACD_Values[i_MAC] = EMA_12$EMA[i_MAC + 14] - EMA_26$EMA[i_MAC]
}
n_9 = 9
k_9 = 2/(n_9 + 1)
x_9 = mean(MACD$MACD_Values[1:9])
l_9 = (length(MACD$MACD_Values) - (n_9-1))
MDEMA_9 = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
MACDDIF = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
colnames(MDEMA_9) = c("MDEMA", "dates")
colnames(MACDDIF) = c("Difference", "dates")
MDEMA_9[1,1] = x_9
for (i_9 in 2:l_9) {
x_9 = MACD$MACD_Values[i_9+n_9-1]*k_9+x_9*(1-k_9)
MDEMA_9$MDEMA[i_9] = x_9
}
for (i_dif in 1:(length(MDEMA_9$MDEMA)-1)) {
MACDDIF$Difference[i_dif] = MACD$MACD_Values[i_dif+8] - MDEMA_9$MDEMA[i_dif]
}
MACD$dates = as.Date(MACD$dates, format = "%Y-%m-%d")
MDEMA_9$dates = as.Date(MDEMA_9$dates, format = "%Y-%m-%d")
MACDDIF$dates = as.Date(MACDDIF$dates, format = "%Y-%m-%d")
M1 = merge(x = MACD, y = MDEMA_9, by = 'dates', all.x = T)
MACTT = merge(x = M1, y = MACDDIF, by = 'dates', all.x = T)
colors_1 = c("MACD" = "yellow", "Signal (EMA 9)" = "orange", "MACDIF" = "orchid4")
ggplot() + geom_bar(data = MACDDIF, stat = 'identity', aes(x = dates, y = Difference, color = "MACDIF")) +
geom_line(data = MACD, aes(x = dates, y = MACD_Values, color = "MACD" )) +
geom_line(data = MDEMA_9, aes(x = dates, y = MDEMA, color = "Signal (EMA 9)")) +
labs(x = "Date", y = "VALUE", color = "Legend", title = "MACD") +
scale_color_manual(values = colors_1)
library("quantmod")
library("ggplot2")
library("tidyquant")
symval = "AMZN"
getSymbols(Symbols = symval, src ="yahoo", from = as.Date("2020-01-01"), to = Sys.Date())
STOCK <- get(symval)
STCKData = data.frame(STOCK)
Dates = index(STOCK)
STCKData = data.frame(STOCK,Dates)
colnames(STCKData) = c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Dates")
Prices = data.frame(Dates, STOCK[,4])
colnames(Prices) = c("dates", "prices")
Av = mean(Prices$prices)
stddev = sd(Prices$prices)
#Regression
regres = lm(prices~dates, data = Prices)
regfitted = data.frame(fitted.values(regres), Dates)
#Custom Trend Lines
custy_1 = c(NA,NA)
custy_2 = c(NA,NA)
custy_3 = c(NA,NA)
custx_1 = as.Date(c(NA,NA))
custx_2 = as.Date(c(NA,NA))
custx_3 = as.Date(c(NA,NA))
cust = data.frame(custy_1,custx_1,custy_2,custx_2)
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
geom_line(data = regfitted, aes(x = Dates, y = fitted.values.regres./100, color = "red")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Closing Price Line Chart")
if(is.na(custy_1)[1] || is.na(custy_1[2]))  {
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else if(is.na(custy_2[1]) || is.na(custy_2[2])){
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else{
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
geom_line(data = cust, aes(x = custx_2, y = custy_2, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}
ggplot() + geom_bar(data = STCKData ,stat = 'identity', aes(x = Dates, y = Volume)) +
labs(title = "Volume Chart")
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Log Scale Closing Price Line Chart") +
coord_trans( y="log10")
#EMA
n_12 = 12
k_12 = 2/(n_12 + 1)
x_12 = mean(Prices$prices[1:12])
l_12 = (length(Prices$prices) - (n_12-1))
EMA_12 = data.frame(numeric(length(Prices$prices) - (n_12-1)), Prices$dates[12:length(Prices$dates)])
colnames(EMA_12) = c("EMA", "dates")
EMA_12[1,1] = x_12
for (i_12 in 2:l_12) {
x_12 = Prices$prices[i_12+n_12-1]*k_12+x_12*(1-k_12)
EMA_12$EMA[i_12] = x_12
}
n_26 = 26
k_26 = 2/(n_26 + 1)
x_26 = mean(Prices$prices[1:26])
l_26 = (length(Prices$prices) - (n_26-1))
EMA_26 = data.frame(numeric(length(Prices$prices) - (n_26-1)), Prices$dates[26:length(Prices$dates)])
colnames(EMA_26) = c("EMA", "dates")
EMA_26[1,1] = x_26
for (i_26 in 2:l_26) {
x_26 = Prices$prices[i_26+n_26-1]*k_26+x_26*(1-k_26)
EMA_26$EMA[i_26] = x_26
}
colors = c("EMA 12" = "darkblue", "EMA 26" = "darkgreen")
ggplot() + geom_line(data = EMA_12, aes(x = dates, y = EMA, color = "EMA 12" )) +
geom_line(data = EMA_26,aes(x = dates, y = EMA, color = "EMA 26")) +
labs(x = "Date", y = "Prices", color = "Legend") +
scale_color_manual(values = colors)
#MACD
MACD = data.frame(numeric(length(EMA_26$EMA)),Dates[26:length(Dates)])
colnames(MACD) = c("MACD_Values", "dates")
for(i_MAC in 1:length(EMA_26$EMA)){
MACD$MACD_Values[i_MAC] = EMA_12$EMA[i_MAC + 14] - EMA_26$EMA[i_MAC]
}
n_9 = 9
k_9 = 2/(n_9 + 1)
x_9 = mean(MACD$MACD_Values[1:9])
l_9 = (length(MACD$MACD_Values) - (n_9-1))
MDEMA_9 = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
MACDDIF = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
colnames(MDEMA_9) = c("MDEMA", "dates")
colnames(MACDDIF) = c("Difference", "dates")
MDEMA_9[1,1] = x_9
for (i_9 in 2:l_9) {
x_9 = MACD$MACD_Values[i_9+n_9-1]*k_9+x_9*(1-k_9)
MDEMA_9$MDEMA[i_9] = x_9
}
for (i_dif in 1:(length(MDEMA_9$MDEMA)-1)) {
MACDDIF$Difference[i_dif] = MACD$MACD_Values[i_dif+8] - MDEMA_9$MDEMA[i_dif]
}
MACD$dates = as.Date(MACD$dates, format = "%Y-%m-%d")
MDEMA_9$dates = as.Date(MDEMA_9$dates, format = "%Y-%m-%d")
MACDDIF$dates = as.Date(MACDDIF$dates, format = "%Y-%m-%d")
M1 = merge(x = MACD, y = MDEMA_9, by = 'dates', all.x = T)
MACTT = merge(x = M1, y = MACDDIF, by = 'dates', all.x = T)
colors_1 = c("MACD" = "yellow", "Signal (EMA 9)" = "orange", "MACDIF" = "orchid4")
ggplot() + geom_bar(data = MACDDIF, stat = 'identity', aes(x = dates, y = Difference, color = "MACDIF")) +
geom_line(data = MACD, aes(x = dates, y = MACD_Values, color = "MACD" )) +
geom_line(data = MDEMA_9, aes(x = dates, y = MDEMA, color = "Signal (EMA 9)")) +
labs(x = "Date", y = "VALUE", color = "Legend", title = "MACD") +
scale_color_manual(values = colors_1)
library("quantmod")
library("ggplot2")
library("tidyquant")
symval = "AMZN"
getSymbols(Symbols = symval, src ="yahoo", from = as.Date("2021-01-01"), to = Sys.Date())
STOCK <- get(symval)
STCKData = data.frame(STOCK)
Dates = index(STOCK)
STCKData = data.frame(STOCK,Dates)
colnames(STCKData) = c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Dates")
Prices = data.frame(Dates, STOCK[,4])
colnames(Prices) = c("dates", "prices")
Av = mean(Prices$prices)
stddev = sd(Prices$prices)
#Regression
regres = lm(prices~dates, data = Prices)
regfitted = data.frame(fitted.values(regres), Dates)
#Custom Trend Lines
custy_1 = c(NA,NA)
custy_2 = c(NA,NA)
custy_3 = c(NA,NA)
custx_1 = as.Date(c(NA,NA))
custx_2 = as.Date(c(NA,NA))
custx_3 = as.Date(c(NA,NA))
cust = data.frame(custy_1,custx_1,custy_2,custx_2)
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
geom_line(data = regfitted, aes(x = Dates, y = fitted.values.regres./100, color = "red")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Closing Price Line Chart")
if(is.na(custy_1)[1] || is.na(custy_1[2]))  {
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else if(is.na(custy_2[1]) || is.na(custy_2[2])){
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}else{
ggplot() + geom_candlestick(data = STCKData, aes(x = Dates, open = Open/100, high = High/100, low = Low/100, close = Close/100) ) +
geom_line(data = cust, aes(x = custx_1, y = custy_1, color = "black")) +
geom_line(data = cust, aes(x = custx_2, y = custy_2, color = "black")) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Candlestick Chart") +
scale_x_date(breaks = seq(min(STCKData$Dates), max(STCKData$Dates), by = 20)) +
scale_y_continuous(breaks = round(seq(min(STCKData$Close/100), max(STCKData$Close/100), by = 5),1))
}
ggplot() + geom_bar(data = STCKData ,stat = 'identity', aes(x = Dates, y = Volume)) +
labs(title = "Volume Chart")
ggplot() + geom_line(data = Prices, aes(x = dates, y = prices/100)) +
ylab("Prices (Main Monitary Unit)") +
labs(title = "Log Scale Closing Price Line Chart") +
coord_trans( y="log10")
#EMA
n_12 = 12
k_12 = 2/(n_12 + 1)
x_12 = mean(Prices$prices[1:12])
l_12 = (length(Prices$prices) - (n_12-1))
EMA_12 = data.frame(numeric(length(Prices$prices) - (n_12-1)), Prices$dates[12:length(Prices$dates)])
colnames(EMA_12) = c("EMA", "dates")
EMA_12[1,1] = x_12
for (i_12 in 2:l_12) {
x_12 = Prices$prices[i_12+n_12-1]*k_12+x_12*(1-k_12)
EMA_12$EMA[i_12] = x_12
}
n_26 = 26
k_26 = 2/(n_26 + 1)
x_26 = mean(Prices$prices[1:26])
l_26 = (length(Prices$prices) - (n_26-1))
EMA_26 = data.frame(numeric(length(Prices$prices) - (n_26-1)), Prices$dates[26:length(Prices$dates)])
colnames(EMA_26) = c("EMA", "dates")
EMA_26[1,1] = x_26
for (i_26 in 2:l_26) {
x_26 = Prices$prices[i_26+n_26-1]*k_26+x_26*(1-k_26)
EMA_26$EMA[i_26] = x_26
}
colors = c("EMA 12" = "darkblue", "EMA 26" = "darkgreen")
ggplot() + geom_line(data = EMA_12, aes(x = dates, y = EMA, color = "EMA 12" )) +
geom_line(data = EMA_26,aes(x = dates, y = EMA, color = "EMA 26")) +
labs(x = "Date", y = "Prices", color = "Legend") +
scale_color_manual(values = colors)
#MACD
MACD = data.frame(numeric(length(EMA_26$EMA)),Dates[26:length(Dates)])
colnames(MACD) = c("MACD_Values", "dates")
for(i_MAC in 1:length(EMA_26$EMA)){
MACD$MACD_Values[i_MAC] = EMA_12$EMA[i_MAC + 14] - EMA_26$EMA[i_MAC]
}
n_9 = 9
k_9 = 2/(n_9 + 1)
x_9 = mean(MACD$MACD_Values[1:9])
l_9 = (length(MACD$MACD_Values) - (n_9-1))
MDEMA_9 = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
MACDDIF = data.frame(numeric(length(MACD$MACD_Values) - (n_9-1)), MACD$dates[9:length(MACD$dates)])
colnames(MDEMA_9) = c("MDEMA", "dates")
colnames(MACDDIF) = c("Difference", "dates")
MDEMA_9[1,1] = x_9
for (i_9 in 2:l_9) {
x_9 = MACD$MACD_Values[i_9+n_9-1]*k_9+x_9*(1-k_9)
MDEMA_9$MDEMA[i_9] = x_9
}
for (i_dif in 1:(length(MDEMA_9$MDEMA)-1)) {
MACDDIF$Difference[i_dif] = MACD$MACD_Values[i_dif+8] - MDEMA_9$MDEMA[i_dif]
}
MACD$dates = as.Date(MACD$dates, format = "%Y-%m-%d")
MDEMA_9$dates = as.Date(MDEMA_9$dates, format = "%Y-%m-%d")
MACDDIF$dates = as.Date(MACDDIF$dates, format = "%Y-%m-%d")
M1 = merge(x = MACD, y = MDEMA_9, by = 'dates', all.x = T)
MACTT = merge(x = M1, y = MACDDIF, by = 'dates', all.x = T)
colors_1 = c("MACD" = "yellow", "Signal (EMA 9)" = "orange", "MACDIF" = "orchid4")
ggplot() + geom_bar(data = MACDDIF, stat = 'identity', aes(x = dates, y = Difference, color = "MACDIF")) +
geom_line(data = MACD, aes(x = dates, y = MACD_Values, color = "MACD" )) +
geom_line(data = MDEMA_9, aes(x = dates, y = MDEMA, color = "Signal (EMA 9)")) +
labs(x = "Date", y = "VALUE", color = "Legend", title = "MACD") +
scale_color_manual(values = colors_1)
MDEMA_9
shiny::runApp('Statistics/R/Shiny/Apps/Technical Analysis')
EMA_12
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
runApp('Statistics/R/Shiny/Apps/Technical Analysis')
